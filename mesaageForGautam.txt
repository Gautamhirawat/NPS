HAD TO A LOT TO SAY AND EXPLAIN THROUGH CODE ITSELF ..SO HERE I AM..WE'LL DELETE THIS FILE LATER


FORMS DIRECTLY HTML MEIN NAHI FORMS.PY MEIN BNANE HOTE HAI 
SAMPLE FOR LOGIN FORM IS AS FOLLOWS

# forms.py

from django import forms
from django.contrib.auth.forms import AuthenticationForm

class CustomAuthenticationForm(AuthenticationForm):
    # You can customize the login form by adding or modifying fields.
    
    # For example, you can add a field for a remember me checkbox:
    remember_me = forms.BooleanField(required=False, initial=True, widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))

    # You can also customize the labels:
    username = forms.CharField(label='Username', widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(label='Password', widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    
    # If you want to customize validation or add extra logic, you can do that too.
    def clean_remember_me(self):
        # Your custom validation logic for the remember_me field
        remember_me = self.cleaned_data.get('remember_me')
        # Add your custom logic here if needed
        return remember_me

# views.py

from django.contrib.auth import authenticate, login
from django.shortcuts import render, redirect
from .forms import CustomAuthenticationForm

def login_view(request):
    if request.method == 'POST':
        form = CustomAuthenticationForm(request, request.POST)
        if form.is_valid():
            user = authenticate(request, username=form.cleaned_data['username'], password=form.cleaned_data['password'])
            if user is not None:
                login(request, user)
                # Redirect to a success page, e.g., home
                return redirect('home')
    else:
        form = CustomAuthenticationForm()

    return render(request, 'login.html', {'form': form})


<!-- login.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <!-- Include Bootstrap CSS (you may adjust the path based on your project structure) -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>

<div class="container mt-5">
    <h2>Login</h2>
    
    <form method="post" class="mt-3">
        {% csrf_token %}
        
        {{ form.username.label_tag }}
        {{ form.username }}
        {{ form.username.errors }}

        {{ form.password.label_tag }}
        {{ form.password }}
        {{ form.password.errors }}

        {{ form.remember_me }}
        {{ form.remember_me.label_tag }}
        
        <button type="submit" class="btn btn-primary mt-3">Login</button>
    </form>
</div>

<!-- Include Bootstrap JS and Popper.js (you may adjust the paths based on your project structure) -->
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>


</body>
</html>

THIS IS HOW A DJANGO FORM HAS TO WORK-THROUGH THREE DIFFERENT FILES JAISA KI CODE SAMET LIKHA HAI
WE NEED SO THAT API CONNECT HO PAAYE